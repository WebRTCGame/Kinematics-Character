{"filter":false,"title":"segment.js","tooltip":"/js/segment.js","undoManager":{"mark":29,"position":29,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":195,"column":2},"action":"insert","lines":["/**"," * Normalize the browser animation API across implementations. This requests"," * the browser to schedule a repaint of the window for the next animation frame."," * Checks for cross-browser support, and, failing to find it, falls back to setTimeout."," * @param {function}    callback  Function to call when it's time to update your animation for the next repaint."," * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation."," * @return {number} Animation frame request."," */","if (!window.requestAnimationFrame) {","  window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||","                                  window.mozRequestAnimationFrame ||","                                  window.msRequestAnimationFrame ||","                                  window.oRequestAnimationFrame ||","                                  function (callback) {","                                    return window.setTimeout(callback, 17 /*~ 1000/60*/);","                                  });","}","","/**"," * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec."," *"," * Cancels an animation frame request."," * Checks for cross-browser support, falls back to clearTimeout."," * @param {number}  Animation frame request."," */","if (!window.cancelAnimationFrame) {","  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||","                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||","                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||","                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||","                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||","                                 window.clearTimeout);","}","","/* Object that contains our utility functions."," * Attached to the window object which acts as the global namespace."," */","window.utils = {};","","/**"," * Keeps track of the current mouse position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, event"," */","window.utils.captureMouse = function (element) {","  var mouse = {x: 0, y: 0, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","  ","  element.addEventListener('mousemove', function (event) {","    var x, y;","    ","    if (event.pageX || event.pageY) {","      x = event.pageX;","      y = event.pageY;","    } else {","      x = event.clientX + body_scrollLeft + element_scrollLeft;","      y = event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    mouse.x = x;","    mouse.y = y;","    mouse.event = event;","  }, false);","  ","  return mouse;","};","","/**"," * Keeps track of the current (first) touch position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, isPressed, event"," */","window.utils.captureTouch = function (element) {","  var touch = {x: null, y: null, isPressed: false, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","","  element.addEventListener('touchstart', function (event) {","    touch.isPressed = true;","    touch.event = event;","  }, false);","","  element.addEventListener('touchend', function (event) {","    touch.isPressed = false;","    touch.x = null;","    touch.y = null;","    touch.event = event;","  }, false);","  ","  element.addEventListener('touchmove', function (event) {","    var x, y,","        touch_event = event.touches[0]; //first touch","    ","    if (touch_event.pageX || touch_event.pageY) {","      x = touch_event.pageX;","      y = touch_event.pageY;","    } else {","      x = touch_event.clientX + body_scrollLeft + element_scrollLeft;","      y = touch_event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    touch.x = x;","    touch.y = y;","    touch.event = event;","  }, false);","  ","  return touch;","};","","/**"," * Returns a color in the format: '#RRGGBB', or as a hex number if specified."," * @param {number|string} color"," * @param {boolean=}      toNumber=false  Return color as a hex number."," * @return {string|number}"," */","window.utils.parseColor = function (color, toNumber) {","  if (toNumber === true) {","    if (typeof color === 'number') {","      return (color | 0); //chop off decimal","    }","    if (typeof color === 'string' && color[0] === '#') {","      color = color.slice(1);","    }","    return window.parseInt(color, 16);","  } else {","    if (typeof color === 'number') {","      color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad","    }","    return color;","  }","};","","/**"," * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'"," * @param {number|string} color"," * @param {number}        alpha"," * @return {string}"," */","window.utils.colorToRGB = function (color, alpha) {","  //number in octal format or string prefixed with #","  if (typeof color === 'string' && color[0] === '#') {","    color = window.parseInt(color.slice(1), 16);","  }","  alpha = (alpha === undefined) ? 1 : alpha;","  //parse hex values","  var r = color >> 16 & 0xff,","      g = color >> 8 & 0xff,","      b = color & 0xff,","      a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);","  //only use 'rgba' if needed","  if (a === 1) {","    return \"rgb(\"+ r +\",\"+ g +\",\"+ b +\")\";","  } else {","    return \"rgba(\"+ r +\",\"+ g +\",\"+ b +\",\"+ a +\")\";","  }","};","","/**"," * Determine if a rectangle contains the coordinates (x,y) within it's boundaries."," * @param {object}  rect  Object with properties: x, y, width, height."," * @param {number}  x     Coordinate position x."," * @param {number}  y     Coordinate position y."," * @return {boolean}"," */","window.utils.containsPoint = function (rect, x, y) {","  return !(x < rect.x ||","           x > rect.x + rect.width ||","           y < rect.y ||","           y > rect.y + rect.height);","};","","/**"," * Determine if two rectangles overlap."," * @param {object}  rectA Object with properties: x, y, width, height."," * @param {object}  rectB Object with properties: x, y, width, height."," * @return {boolean}"," */","window.utils.intersects = function (rectA, rectB) {","  return !(rectA.x + rectA.width < rectB.x ||","           rectB.x + rectB.width < rectA.x ||","           rectA.y + rectA.height < rectB.y ||","           rectB.y + rectB.height < rectA.y);","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":11},"end":{"row":0,"column":13},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":12},"end":{"row":0,"column":14},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":21},"end":{"row":0,"column":22},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":22},"end":{"row":0,"column":23},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":23},"end":{"row":0,"column":24},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":24},"end":{"row":0,"column":25},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":28},"end":{"row":0,"column":29},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":196,"column":2},"action":"remove","lines":["console.log(\"utils loading\");","/**"," * Normalize the browser animation API across implementations. This requests"," * the browser to schedule a repaint of the window for the next animation frame."," * Checks for cross-browser support, and, failing to find it, falls back to setTimeout."," * @param {function}    callback  Function to call when it's time to update your animation for the next repaint."," * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation."," * @return {number} Animation frame request."," */","if (!window.requestAnimationFrame) {","  window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||","                                  window.mozRequestAnimationFrame ||","                                  window.msRequestAnimationFrame ||","                                  window.oRequestAnimationFrame ||","                                  function (callback) {","                                    return window.setTimeout(callback, 17 /*~ 1000/60*/);","                                  });","}","","/**"," * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec."," *"," * Cancels an animation frame request."," * Checks for cross-browser support, falls back to clearTimeout."," * @param {number}  Animation frame request."," */","if (!window.cancelAnimationFrame) {","  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||","                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||","                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||","                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||","                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||","                                 window.clearTimeout);","}","","/* Object that contains our utility functions."," * Attached to the window object which acts as the global namespace."," */","window.utils = {};","","/**"," * Keeps track of the current mouse position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, event"," */","window.utils.captureMouse = function (element) {","  var mouse = {x: 0, y: 0, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","  ","  element.addEventListener('mousemove', function (event) {","    var x, y;","    ","    if (event.pageX || event.pageY) {","      x = event.pageX;","      y = event.pageY;","    } else {","      x = event.clientX + body_scrollLeft + element_scrollLeft;","      y = event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    mouse.x = x;","    mouse.y = y;","    mouse.event = event;","  }, false);","  ","  return mouse;","};","","/**"," * Keeps track of the current (first) touch position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, isPressed, event"," */","window.utils.captureTouch = function (element) {","  var touch = {x: null, y: null, isPressed: false, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","","  element.addEventListener('touchstart', function (event) {","    touch.isPressed = true;","    touch.event = event;","  }, false);","","  element.addEventListener('touchend', function (event) {","    touch.isPressed = false;","    touch.x = null;","    touch.y = null;","    touch.event = event;","  }, false);","  ","  element.addEventListener('touchmove', function (event) {","    var x, y,","        touch_event = event.touches[0]; //first touch","    ","    if (touch_event.pageX || touch_event.pageY) {","      x = touch_event.pageX;","      y = touch_event.pageY;","    } else {","      x = touch_event.clientX + body_scrollLeft + element_scrollLeft;","      y = touch_event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    touch.x = x;","    touch.y = y;","    touch.event = event;","  }, false);","  ","  return touch;","};","","/**"," * Returns a color in the format: '#RRGGBB', or as a hex number if specified."," * @param {number|string} color"," * @param {boolean=}      toNumber=false  Return color as a hex number."," * @return {string|number}"," */","window.utils.parseColor = function (color, toNumber) {","  if (toNumber === true) {","    if (typeof color === 'number') {","      return (color | 0); //chop off decimal","    }","    if (typeof color === 'string' && color[0] === '#') {","      color = color.slice(1);","    }","    return window.parseInt(color, 16);","  } else {","    if (typeof color === 'number') {","      color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad","    }","    return color;","  }","};","","/**"," * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'"," * @param {number|string} color"," * @param {number}        alpha"," * @return {string}"," */","window.utils.colorToRGB = function (color, alpha) {","  //number in octal format or string prefixed with #","  if (typeof color === 'string' && color[0] === '#') {","    color = window.parseInt(color.slice(1), 16);","  }","  alpha = (alpha === undefined) ? 1 : alpha;","  //parse hex values","  var r = color >> 16 & 0xff,","      g = color >> 8 & 0xff,","      b = color & 0xff,","      a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);","  //only use 'rgba' if needed","  if (a === 1) {","    return \"rgb(\"+ r +\",\"+ g +\",\"+ b +\")\";","  } else {","    return \"rgba(\"+ r +\",\"+ g +\",\"+ b +\",\"+ a +\")\";","  }","};","","/**"," * Determine if a rectangle contains the coordinates (x,y) within it's boundaries."," * @param {object}  rect  Object with properties: x, y, width, height."," * @param {number}  x     Coordinate position x."," * @param {number}  y     Coordinate position y."," * @return {boolean}"," */","window.utils.containsPoint = function (rect, x, y) {","  return !(x < rect.x ||","           x > rect.x + rect.width ||","           y < rect.y ||","           y > rect.y + rect.height);","};","","/**"," * Determine if two rectangles overlap."," * @param {object}  rectA Object with properties: x, y, width, height."," * @param {object}  rectB Object with properties: x, y, width, height."," * @return {boolean}"," */","window.utils.intersects = function (rectA, rectB) {","  return !(rectA.x + rectA.width < rectB.x ||","           rectB.x + rectB.width < rectA.x ||","           rectA.y + rectA.height < rectB.y ||","           rectB.y + rectB.height < rectA.y);","};"]},{"start":{"row":0,"column":0},"end":{"row":58,"column":2},"action":"insert","lines":["function Segment (width, height, color) {","  this.x = 0;","  this.y = 0;","  this.width = width;","  this.height = height;","  this.vx = 0;","  this.vy = 0;","  this.rotation = 0;","  this.scaleX = 1;","  this.scaleY = 1;","  this.color = (color === undefined) ? \"#ffffff\" : utils.parseColor(color);","  this.lineWidth = 1;","}","","Segment.prototype.draw = function (context) {","  var h = this.height,","      d = this.width + h, //top-right diagonal","      cr = h / 2;         //corner radius","  context.save();","  context.translate(this.x, this.y);","  context.rotate(this.rotation);","  context.scale(this.scaleX, this.scaleY);","  context.lineWidth = this.lineWidth;","  context.fillStyle = this.color;","  context.beginPath();","  context.moveTo(0, -cr);","  context.lineTo(d-2*cr, -cr);","  context.quadraticCurveTo(-cr+d, -cr, -cr+d, 0);","  context.lineTo(-cr+d, h-2*cr);","  context.quadraticCurveTo(-cr+d, -cr+h, d-2*cr, -cr+h);","  context.lineTo(0, -cr+h);","  context.quadraticCurveTo(-cr, -cr+h, -cr, h-2*cr);","  context.lineTo(-cr, 0);","  context.quadraticCurveTo(-cr, -cr, 0, -cr);","  context.closePath();","  context.fill();","  if (this.lineWidth > 0) {","    context.stroke();","  }","  //draw the 2 \"pins\"","  context.beginPath();","  context.arc(0, 0, 2, 0, (Math.PI * 2), true);","  context.closePath();","  context.stroke();","","  context.beginPath();","  context.arc(this.width, 0, 2, 0, (Math.PI * 2), true);","  context.closePath();","  context.stroke();","  ","  context.restore();","};","","Segment.prototype.getPin = function () {","  return {","    x: this.x + Math.cos(this.rotation) * this.width,","    y: this.y + Math.sin(this.rotation) * this.width","  };","};"]}]}]]},"ace":{"folds":[],"scrolltop":180,"scrollleft":0,"selection":{"start":{"row":13,"column":0},"end":{"row":13,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":15,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1426683241000,"hash":"8837593c6a2e9e0aa8eec9f64c756e163e165e70"}